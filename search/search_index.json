{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>\\(\\textbf{Ecuaciones Diferenciales Ordinarias (ODEs)}\\)</p> <p>Para esta tarea se usaron tres distintos m\u00e9todos para trabajar con ecuaciones diferenciales no lineales.</p> <p>1) M\u00e9todo de Euler </p> <p>El m\u00e9todo de Euler se basa en una expansi\u00f3n de Taylor de la funci\u00f3n de x(t). Por ser un m\u00e9todo simple, su aproximaci\u00f3n es menos precisa en comparaci\u00f3n a los otros m\u00e9todos utilizados. Para iniciar este m\u00e9todo se debe encontrar el n\u00famero de pasos que vamos a considerar. Mediante la siguiente ecuaci\u00f3n: </p> \\[N=\\frac{(tf-t0)}{h}\\] <p>N siendo el n\u00famero de pasos, tf tiempo final y t0 tiempo inicial. Luego para hacer las iteraciones el valor de x me var\u00eda de la forma: \\(\\({x(t + h) = x(t) + hf(x,t)}\\)\\)</p> <p>Y t var\u00eda de la forma:  \\(\\({t_{n+1}=t_n+h}\\)\\)</p> <p>2) M\u00e9todo de Runge-Kutta 2do Orden (RK2) Este m\u00e9todo tambi\u00e9n es llamado punto medio, ya que se basa en este principio matem\u00e1tico. Se inicia con las siguientes dos ecuaciones:  \\(\\(k_1=hf(x_0, t_0)\\)\\) \\(\\(k_2=hf(x_0+\\frac {k1}{2}, t_0 + \\frac{h}{2})\\)\\)</p> <p>Luego con estos valores encontrados, podemos actualizar los valores de x y t, con las siguientes ecuaciones:  \\(\\(x(t+h)=x(t)+k_2\\)\\) \\(\\(t=t+h\\)\\)</p> <p>Y este proceso se repite de manera iterativa, hasta llegar al tiempo final deseado. </p> <p>3) M\u00e9todo de Runge-Kutta 4to Orden (RK4)</p> <p>Por \u00faltimo se trabaja con este m\u00e9todo, que sigue la misma idea de RK2. La diferencia es que se trabajan con m\u00e1s ecuaciones de k, mostradas a continuaci\u00f3n:  \\(\\(k1 = h * f(x[n], t[n])\\)\\) \\(\\(k2 = h * f(x[n] + 0.5 * k1, t[n] + 0.5 * h)\\)\\) \\(\\(k3 = h * f(x[n] + 0.5 * k2, t[n] + 0.5 * h)\\)\\) \\(\\(k4 = h * f(x[n] + k3, t[n] + h)\\)\\)</p> <p>Luego se actualizan los valores de x, t, con:  \\(\\(x[n + 1] = x[n] + \\frac{(k1 + 2*k2 + 2*k3 + k4)}{6}\\)\\) \\(\\(t[n + 1] = t[n] + h\\)\\)</p> <p>De los tres m\u00e9todos utilizados en este proyecto, este es el que mejores valores aproximados genera.</p>"},{"location":"about/","title":"About","text":"<p>\\(\\textbf{Estudiantes}\\)</p> <p>Stephanie Chaves Hern\u00e1ndez - B92158</p> <p>Mar\u00eda Jos\u00e9 Ram\u00edrez Rivera - B96394</p> <p>Isaac Jos\u00e9 Prado Berm\u00fadez - B96093</p>"},{"location":"reference/","title":"Referencia","text":"<p>Para la documentaci\u00f3n de las funciones del m\u00f3dulo</p>"},{"location":"reference/#ODES.ODEResuelto.euler","title":"<code>euler(f, y0, t0, tf, h)</code>","text":"<p>\u00c9ste m\u00e9todo nos permite resolver una ODE usando el m\u00e9todo de Euler.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; def f(y, t): return y + t\n&gt;&gt;&gt; euler(f, 0, 0, 1, 0.1)\n[0, 0.1, 0.2, 0.3]\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>f</code> <code>function</code> <p>Funci\u00f3n que describe la ecuaci\u00f3n diferencial de primer orden: dy/dt = f(y, t)</p> required <code>y0</code> <code>float</code> <p>El valor inicial de y</p> required <code>t0</code> <code>float</code> <p>El tiempo inicial</p> required <code>tf</code> <code>float</code> <p>El tiempo final</p> required <code>h</code> <code>float</code> <p>Paso de tiempo</p> required <p>Returns:</p> Name Type Description <code>list</code> <p>Lista de valores de y en cada paso de tiempo (h).</p> Source code in <code>ODES/ODEResuelto.py</code> <pre><code>def euler(f, y0, t0, tf, h):\n    \"\"\"\n    \u00c9ste m\u00e9todo nos permite resolver una ODE usando el m\u00e9todo de Euler.\n\n    Examples:\n        &gt;&gt;&gt; def f(y, t): return y + t\n        &gt;&gt;&gt; euler(f, 0, 0, 1, 0.1)\n        [0, 0.1, 0.2, 0.3]\n\n    Parameters:\n        f (function): Funci\u00f3n que describe la ecuaci\u00f3n diferencial de primer orden: dy/dt = f(y, t)\n        y0 (float): El valor inicial de y\n        t0 (float): El tiempo inicial\n        tf (float): El tiempo final\n        h (float): Paso de tiempo\n\n    Returns:\n        list: Lista de valores de y en cada paso de tiempo (h).\n    \"\"\"\n\n    y = y0\n    y_array = [y]\n    t = t0\n    while t &lt; tf:\n        y = y + h * f(y, t)\n        t = t + h\n        y_array.append(y)\n    return y_array\n</code></pre>"},{"location":"reference/#ODES.ODEResuelto.rk2","title":"<code>rk2(f, y0, t0, tf, h)</code>","text":"<p>\u00c9ste m\u00e9todo, logra resolver una ODE usando el m\u00e9todo de Runge-Kutta de segundo orden (RK2).</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; def f(y, t): return y + t\n&gt;&gt;&gt; rk2(f, 0, 0, 1, 0.1)\n[0, 0.1, 0.2, 0.3]\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>f</code> <code>function</code> <p>Funci\u00f3n que describe la ecuaci\u00f3n diferencial de primer orden: dy/dt = f(y, t)</p> required <code>y0</code> <code>float</code> <p>El valor inicial de y</p> required <code>t0</code> <code>float</code> <p>El tiempo inicial</p> required <code>tf</code> <code>float</code> <p>El tiempo final</p> required <code>h</code> <code>float</code> <p>Paso de tiempo</p> required <p>Returns:</p> Name Type Description <code>list</code> <p>Lista de valores de y en cada paso de tiempo (h).</p> Source code in <code>ODES/ODEResuelto.py</code> <pre><code>def rk2(f, y0, t0, tf, h):\n    \"\"\"\n    \u00c9ste m\u00e9todo, logra resolver una ODE usando el m\u00e9todo de Runge-Kutta de segundo orden (RK2).\n\n    Examples:\n        &gt;&gt;&gt; def f(y, t): return y + t\n        &gt;&gt;&gt; rk2(f, 0, 0, 1, 0.1)\n        [0, 0.1, 0.2, 0.3]\n\n    Parameters:\n        f (function): Funci\u00f3n que describe la ecuaci\u00f3n diferencial de primer orden: dy/dt = f(y, t)\n        y0 (float): El valor inicial de y\n        t0 (float): El tiempo inicial\n        tf (float): El tiempo final\n        h (float): Paso de tiempo\n\n    Returns:\n        list: Lista de valores de y en cada paso de tiempo (h).\n    \"\"\"\n\n    y = y0\n    y_array = [y]\n    t = t0\n    while t &lt; tf:\n        k1 = h * f(y, t)\n        k2 = h * f(t + 0.5 * h, y + 0.5 * k1)\n        y = y + k2\n        t = t + h\n        y_array.append(y)\n    return y_array\n</code></pre>"},{"location":"reference/#ODES.ODEResuelto.rk4","title":"<code>rk4(f, y0, t0, tf, h)</code>","text":"<p>\u00c9ste m\u00e9todo nos permite resolver una ODE usando el m\u00e9todo de Runge-Kutta de cuarto orden (RK4).</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; def f(y, t): return y + t\n&gt;&gt;&gt; rk4(f, 0, 0, 1, 0.1)\n[0, 0.1, 0.2, 0.3]\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>f</code> <code>function</code> <p>Funci\u00f3n que describe la ecuaci\u00f3n diferencial de primer orden: dy/dt = f(y, t)</p> required <code>y0</code> <code>float</code> <p>El valor inicial de y</p> required <code>t0</code> <code>float</code> <p>El tiempo inicial</p> required <code>tf</code> <code>float</code> <p>El tiempo final</p> required <code>h</code> <code>float</code> <p>Paso de tiempo</p> required <p>Returns:</p> Name Type Description <code>list</code> <p>Lista de valores de y en cada paso de tiempo (h).</p> Source code in <code>ODES/ODEResuelto.py</code> <pre><code>def rk4(f, y0, t0, tf, h):\n    \"\"\"\n    \u00c9ste m\u00e9todo nos permite resolver una ODE usando el m\u00e9todo de Runge-Kutta de cuarto orden (RK4).\n\n    Examples:\n        &gt;&gt;&gt; def f(y, t): return y + t\n        &gt;&gt;&gt; rk4(f, 0, 0, 1, 0.1)\n        [0, 0.1, 0.2, 0.3]\n\n    Parameters:\n        f (function): Funci\u00f3n que describe la ecuaci\u00f3n diferencial de primer orden: dy/dt = f(y, t)\n        y0 (float): El valor inicial de y\n        t0 (float): El tiempo inicial\n        tf (float): El tiempo final\n        h (float): Paso de tiempo\n\n    Returns:\n        list: Lista de valores de y en cada paso de tiempo (h).\n    \"\"\"\n\n    y = y0\n    y_array = [y]\n    t = t0\n    while t &lt; tf:\n        k1 = h * f(y, t)\n        k2 = h * f(t + 0.5 * h, y + 0.5 * k1)\n        k3 = h * f(t + 0.5 * h, y + 0.5 * k2)\n        k4 = h * f(t + h, y + k3)\n        y = y + (1/6) * (k1 + 2 * k2 + 2 * k3 + k4)\n        t = t + h\n        y_array.append(y)\n    return y_array\n</code></pre>"}]}